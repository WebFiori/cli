<?php
/**
 * This file is licensed under MIT License.
 *
 * Copyright (c) 2024 Ibrahim BinAlshikh
 *
 * For more information on the license, please visit:
 * https://github.com/WebFiori/.github/blob/main/LICENSE
 *
 */
namespace webfiori\cli;

use webfiori\cli\Runner;
use PHPUnit\Framework\TestCase;

/**
 * Helper class which is used to write unit test cases for command line commands.
 *
 * @author Ibrahim
 */
class CommandTestCase extends TestCase {
    private $exitStatus;
    private $outputs;
    /**
     * 
     * @var Runner
     */
    private $runner;
    /**
     * End of line character which is used when sending outputs.
     */
    const NL = "\n";
    /**
     * Returns an array that holds all outputs that was generated by running specific
     * command.
     * 
     * @return array If no command was executed, the array will be empty. Other
     * than that, the array will hold outputs line by line in each index.
     */
    public function getOutput() : array {
        if ($this->outputs === null) {
            $this->outputs = [];
        }
        
        return $this->outputs;
    }
    /**
     * Returns an integer thar represents exit status of running specific command.
     * 
     * @return int Default return value is 0.
     */
    public function getExitCode() : int {
        if ($this->exitStatus === null) {
            $this->exitStatus = 0;
        }
        
        return $this->exitStatus;
    }
    public function getRunner(bool $reset = false) : Runner {
        if ($this->runner === null) {
            $this->runner = new Runner();
        }
        if ($reset) {
            $this->runner->reset();
        }
        return $this->runner;
    }
    
    
    public function executeMultiCommand(array $commands, string $default = '', array $argv = [], array $userInputs = []) : array {
        $runner = $this->getRunner(true);
        foreach ($commands as $command) {
            $runner->register($command);
        }
        $runner->setDefaultCommand($default);
        $this->exec($argv, $userInputs);
        return $this->getOutput();
    }
    /**
     * Executes a specific command and return its output as an array.
     * 
     * @param array $commands An array that holds the names of commands to be
     * registered with the command that will be executed.
     * 
     * @param array $argv Arguments vector that will be passed to the command.
     * This can be an associative array of options and values or just options.
     * Note that first index can have the name of the command that will be
     * tested if last argument of the method is set to null.
     * 
     * @param array $userInputs A sequence of strings that represents user inputs
     * when the command is executing. Each index in the array represents a single
     * line of input.
     * 
     * @param CLICommand $command The command that will be tested.
     * 
     * @return array The method will return an array that will hold
     * outputs line by line in each index.
     */
    public function executeSingleCommand(CLICommand $command, array $argv = [], array $userInputs = []) : array {
        $this->getRunner(true)->register($command);
        $this->exec($argv, $userInputs, $command);
        return $this->getOutput();
    }
    
    private function exec(array $argv, array $userInputs, CLICommand $command = null) {
        
        if ($command !== null) {
            $key = array_search($command->getName(), $argv);
            if ($key != 0 || $key === false) {
                $argv = array_merge(['main.php', $command->getName()], $argv);
            } else {
                $argv = array_merge(['main.php'], $argv);
            }
        } else {
            $argv = array_merge(['main.php'], $argv);
        }
        $runner = $this->getRunner();
        
        //Set arguments vector
        $runner->setArgsVector($argv);
        
        //Set user inputs.
        //Must be called to use Array as input and output stream even if there are no inputs.
        $runner->setInputs($userInputs);
        
        //Start the process
        $this->exitStatus = $runner->start();
        
        $this->outputs = $runner->getOutput();
    }
}
